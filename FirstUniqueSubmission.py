# -*- coding: utf-8 -*-
"""FirstUniqueSubmission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u8pYa5ctUJrenZh9NWqSgNWjfpAnhcXQ
"""

class Node:
    def __init__(self, value=None):
        self.value = value
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = Node()
        self.tail = Node()
        self.head.next = self.tail
        self.tail.prev = self.head

    def append(self, node):
        node.prev = self.tail.prev
        node.next = self.tail
        self.tail.prev.next = node
        self.tail.prev = node

    def remove(self, node):
        node.prev.next = node.next
        node.next.prev = node.prev
        node.next = node.prev = None

class SimpleHashMap:
    def __init__(self, size=1000):
        self.size = size
        self.map = [[] for _ in range(size)]

    def _get_hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        key_hash = self._get_hash(key)
        key_value = [key, value]

        for pair in self.map[key_hash]:
            if pair[0] == key:
                pair[1] = value
                return True
        self.map[key_hash].append(key_value)
        return True

    def get(self, key):
        key_hash = self._get_hash(key)
        for pair in self.map[key_hash]:
            if pair[0] == key:
                return pair[1]
        return None

    def delete(self, key):
        key_hash = self._get_hash(key)
        for i, pair in enumerate(self.map[key_hash]):
            if pair[0] == key:
                self.map[key_hash].pop(i)
                return True
        return False

class FirstUnique:
    def __init__(self, nums):
        self.hashmap = {}
        self.head = None
        self.tail = None
        for num in nums:
            self.add(num)

    def add(self, number):
        if number not in self.hashmap:
            self.hashmap[number] = 1  # Add number to hashmap with count 1
            if not self.head:
                # If the list is empty, create a new node as both head and tail
                self.head = Node(number)
                self.tail = self.head
            else:
                # Append a new node to the end of the linked list
                new_node = Node(number)
                new_node.prev = self.tail
                self.tail.next = new_node
                self.tail = new_node
        else:
            self.hashmap[number] += 1  # Increment count of existing number
            cur = self.tail
            while cur is not None and cur.value != number:
                cur = cur.prev  # Find the node with the number to remove

            if cur is not None:
                # Remove the node with the number from the linked list
                if cur.next is not None and cur.prev is not None:
                    cur.prev.next = cur.next
                    cur.next.prev = cur.prev
                elif cur.next is None and cur.prev is not None:
                    cur = cur.prev
                    cur.next = None
                    self.tail = cur
                elif cur.next is not None and cur.prev is None:
                    self.head = cur.next
                    cur.next.prev = None
                else:
                    self.head = None
                    self.tail = None

    def showFirstUnique(self):
        if self.head is not None:
            return self.head.value
        return -1


# Test the FirstUnique class
firstUnique = FirstUnique([6, 8, 15, 15])
print(firstUnique.showFirstUnique())  # Should print 6

firstUnique.add(6)
print(firstUnique.showFirstUnique())  # Should print 8

firstUnique.add(8)
print(firstUnique.showFirstUnique())  # Should print -1